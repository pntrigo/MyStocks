{"ast":null,"code":"import config from '../config/config';\nconst baseUrl = config.apiUrl;\nexport async function getStocks() {\n  if (!baseUrl) throw new Error('API URL is not set.');\n  const res = await fetch(`${baseUrl}/getStocks`);\n  if (!res.ok) throw new Error('Failed to fetch stocks');\n  return res.json();\n}\nexport async function getPortfolio() {\n  if (!baseUrl) throw new Error('API URL is not set.');\n  const res = await fetch(`${baseUrl}/portfolio`);\n  if (!res.ok) throw new Error('Failed to fetch portfolio');\n  return res.json();\n}\nexport async function addToPortfolio({\n  symbol,\n  quantity,\n  price\n}) {\n  if (!baseUrl) throw new Error('API URL is not set.');\n  const res = await fetch(`${baseUrl}/portfolio`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      symbol,\n      quantity,\n      price\n    })\n  });\n  if (!res.ok) throw new Error('Failed to add to portfolio');\n  return res.json();\n}\nexport async function editPortfolioEntry({\n  id,\n  symbol,\n  quantity\n}) {\n  if (!baseUrl) throw new Error('API URL is not set.');\n  const res = await fetch(`${baseUrl}/portfolio/edit`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id,\n      symbol,\n      quantity\n    })\n  });\n  if (!res.ok) throw new Error('Failed to edit portfolio entry');\n  return res.json();\n}\nexport async function deletePortfolioEntry(id) {\n  if (!baseUrl) throw new Error('API URL is not set.');\n  const res = await fetch(`${baseUrl}/portfolio/delete`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id\n    })\n  });\n  if (!res.ok) throw new Error('Failed to delete portfolio entry');\n  return res.json();\n}","map":{"version":3,"names":["config","baseUrl","apiUrl","getStocks","Error","res","fetch","ok","json","getPortfolio","addToPortfolio","symbol","quantity","price","method","headers","body","JSON","stringify","editPortfolioEntry","id","deletePortfolioEntry"],"sources":["D:/02-AH/Kotlin/MyStocks/ui/src/api/api.js"],"sourcesContent":["import config from '../config/config';\r\n\r\nconst baseUrl = config.apiUrl;\r\n\r\nexport async function getStocks() {\r\n  if (!baseUrl) throw new Error('API URL is not set.');\r\n  const res = await fetch(`${baseUrl}/getStocks`);\r\n  if (!res.ok) throw new Error('Failed to fetch stocks');\r\n  return res.json();\r\n}\r\n\r\nexport async function getPortfolio() {\r\n  if (!baseUrl) throw new Error('API URL is not set.');\r\n  const res = await fetch(`${baseUrl}/portfolio`);\r\n  if (!res.ok) throw new Error('Failed to fetch portfolio');\r\n  return res.json();\r\n}\r\n\r\nexport async function addToPortfolio({ symbol, quantity, price }) {\r\n  if (!baseUrl) throw new Error('API URL is not set.');\r\n  const res = await fetch(`${baseUrl}/portfolio`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ symbol, quantity, price })\r\n  });\r\n  if (!res.ok) throw new Error('Failed to add to portfolio');\r\n  return res.json();\r\n}\r\n\r\nexport async function editPortfolioEntry({ id, symbol, quantity }) {\r\n  if (!baseUrl) throw new Error('API URL is not set.');\r\n  const res = await fetch(`${baseUrl}/portfolio/edit`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ id, symbol, quantity })\r\n  });\r\n  if (!res.ok) throw new Error('Failed to edit portfolio entry');\r\n  return res.json();\r\n}\r\n\r\nexport async function deletePortfolioEntry(id) {\r\n  if (!baseUrl) throw new Error('API URL is not set.');\r\n  const res = await fetch(`${baseUrl}/portfolio/delete`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ id })\r\n  });\r\n  if (!res.ok) throw new Error('Failed to delete portfolio entry');\r\n  return res.json();\r\n}\r\n\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,kBAAkB;AAErC,MAAMC,OAAO,GAAGD,MAAM,CAACE,MAAM;AAE7B,OAAO,eAAeC,SAASA,CAAA,EAAG;EAChC,IAAI,CAACF,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,YAAY,CAAC;EAC/C,IAAI,CAACI,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIH,KAAK,CAAC,wBAAwB,CAAC;EACtD,OAAOC,GAAG,CAACG,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeC,YAAYA,CAAA,EAAG;EACnC,IAAI,CAACR,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,YAAY,CAAC;EAC/C,IAAI,CAACI,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIH,KAAK,CAAC,2BAA2B,CAAC;EACzD,OAAOC,GAAG,CAACG,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeE,cAAcA,CAAC;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAM,CAAC,EAAE;EAChE,IAAI,CAACZ,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,YAAY,EAAE;IAC9Ca,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,MAAM;MAAEC,QAAQ;MAAEC;IAAM,CAAC;EAClD,CAAC,CAAC;EACF,IAAI,CAACR,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIH,KAAK,CAAC,4BAA4B,CAAC;EAC1D,OAAOC,GAAG,CAACG,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeW,kBAAkBA,CAAC;EAAEC,EAAE;EAAET,MAAM;EAAEC;AAAS,CAAC,EAAE;EACjE,IAAI,CAACX,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,iBAAiB,EAAE;IACnDa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEE,EAAE;MAAET,MAAM;MAAEC;IAAS,CAAC;EAC/C,CAAC,CAAC;EACF,IAAI,CAACP,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIH,KAAK,CAAC,gCAAgC,CAAC;EAC9D,OAAOC,GAAG,CAACG,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAea,oBAAoBA,CAACD,EAAE,EAAE;EAC7C,IAAI,CAACnB,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACpD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,mBAAmB,EAAE;IACrDa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEE;IAAG,CAAC;EAC7B,CAAC,CAAC;EACF,IAAI,CAACf,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIH,KAAK,CAAC,kCAAkC,CAAC;EAChE,OAAOC,GAAG,CAACG,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}